
    Audio File Convert
    Version: 2.0
    Copyright 2003-2013, Apple Inc. All Rights Reserved.
    Specify -h (-help) for command options

Usage:
afconvert [option...] input_file [output_file]
    Options may appear before or after the direct arguments. If output_file
    is not specified, a name is generated programmatically and the file
    is written into the same directory as input_file.
afconvert input_file [-o output_file [option...]]...
    Output file options apply to the previous output_file. Other options
    may appear anywhere.

General options:
    { -d | --data } data_format[@sample_rate][/format_flags][#frames_per_packet]
        [-][BE|LE]{F|[U]I}{8|16|24|32|64}          (PCM)
            e.g.   BEI16   F32@44100
        or a data format appropriate to file format (see -hf)
        format_flags: hex digits, e.g. '80'
        Frames per packet can be specified for some encoders, e.g.: samr#12
        A format of "0" specifies the same format as the source file,
            with packets copied exactly.
        A format of "N" specifies the destination format should be the
            native format of the lossless encoded source file (alac, FLAC only)
    { -c | --channels } number_of_channels
        add/remove channels without regard to order
    { -m | --channelmap } list of input channels in output
        set a channel map, mapping which input channel goes to each output one.
        channel number starts at zero. -1 makes a silent output channel.
        For example, to reverse a stereo stream: -m 1 0
    { -l | --channellayout } layout_tag
        layout_tag: name of a constant from CoreAudioTypes.h
          (prefix "kAudioChannelLayoutTag_" may be omitted)
        if specified once, applies to output file; if twice, the first
          applies to the input file, the second to the output file
    { -b | --bitrate } total_bit_rate_bps
         e.g. 256000 will give you roughly:
             for stereo source: 128000 bits per channel
             for 5.1 source: 51000 bits per channel
                 (the .1 channel consumes few bits and can be discounted in the
                 total bit rate calculation)
    { -q | --quality } codec_quality
        codec_quality: 0-127
    { -r | --src-quality } src_quality
        src_quality (sample rate converter quality): 0-127 (default is 127)
    { --src-complexity } src_complexity
        src_complexity (sample rate converter complexity): line, norm, bats minp
    { -s | --strategy } strategy
        bitrate allocation strategy for encoding an audio track
        0 for CBR, 1 for ABR, 2 for VBR_constrained, 3 for VBR
    --prime-method method
        decode priming method (see AudioConverter.h)
    --prime-override samples_prime samples_remain [samples_valid]
        can be used to override the packet table info stored in the source
        file to the specified values. If . is specified for any argument,
        the value in the file is used. If ? is specified for any argument,
        the value in the file is used if the file's total frame count matches
        the total frames accounted for by the file's packet table info;
        otherwise a value is substituted that treats frames as valid.
    --no-filler
        don't page-align audio data in the output file
    --soundcheck-generate
        analyze audio, add SoundCheck data to the output file
    --media-kind "media kind string"
        media kinds are: "Audio Ad", "Video Ad"
    --anchor-loudness
        set a single precision floating point value to
        indicate the anchor loudness of the content in dB
        Note that for MP4 and M4* file types, this requires that the
        --soundcheck-generate option is also enabled.
    --anchor-generate
        Analyze audio and add dialogue anchor level data to output file
        Note that for MP4 and M4* file types, this requires that the
        --soundcheck-generate option is also enabled.
    --generate-hash
        generate an SHA-1 hash of the input audio data and add it to the output
        file.
    --codec-manuf codec_manuf
        specify the codec with the specified 4-character component manufacturer
        code
    --dither algorithm
        algorithm: 1-2
    --mix
        enable channel downmixing
    { -u | --userproperty } property value
        set an arbitrary AudioConverter property to a given value
        property is a four-character code; value can be a signed
        32-bit integer or a single precision floating point value.
        e.g. '-u vbrq <sound_quality>' sets the sound quality level
             (<sound_quality>: 0-127)
        May not be used in a transcoding situation.
    -ud property value
        identical to -u except only applies to a decoder. Fails if there is no
        decoder.
    -ue property value
        identical to -u except only applies to an encoder. Fails if there is no
        encoder.

Input file options:
    --decode-formatid data_format_id
        For input audio files with multiple data format layers (e.g. AAC_HE),
        specify by format id (e.g. 'aach') which layer of the input file to
        decode.
    --read-track track_index
        For input files containing multiple tracks, the index (0..n-1)
        of the track to read and convert.
    --offset number_of_frames
        the starting offset in the input file in frames. (The first frame is
        frame zero.)
    --soundcheck-read
         read SoundCheck data from source file and set it on any destination
         file(s) of appropriate filetype (.m4a, .caf).
    --copy-hash
         copy an SHA-1 hash chunk, if present, from the source file to the
         output file.
    --check-hash
         if input file is integer linear PCM or lossless encoded, and has hash
         chunk embedded, check its integrety by comparing its hash chunk to the
         hash calculated from its audio data. Fails if mismatching.
    --gapless-before filename
        file coming before the current input file of a gapless album
    --gapless-after filename
        file coming after the current input file of a gapless album

Output file options:
    -o filename
        specify an (additional) output file.
    { -f | --file } file_format
        use -hf for a complete list of supported file/data formats
    --condensed-framing field_size_in_bits
        specify storage size in bits for externally framed packet sizes.
        Supported value is 16 for aac in m4a and m4b file format.

Other options:
    { -v | --verbose }
        print progress verbosely
    { -t | --tag }
        If encoding to CAF, store the source file's format and name in a user
        chunk. If decoding from CAF, use the destination format and filename
        found in a user chunk.
    { --leaks }
        run leaks at the end of the conversion
    { --profile }
        collect and print performance information

Help options:
    { -hf | --help-formats }
        print a list of supported file/data formats
    { -h | --help }
        print this help

Audio file and data formats:
    '3gpp' = 3GP Audio (.3gp, .3gpp)
               data_formats: 'aac ' 'aace' 'aacf' 'aacg' 'aach' 'aacl'
                             'aacp' 'samr'
    '3gp2' = 3GPP-2 Audio (.3g2, .3gp2)
               data_formats: 'aac ' 'aace' 'aacf' 'aacg' 'aach' 'aacl'
                             'aacp' 'samr'
    'adts' = AAC ADTS (.aac, .adts)
               data_formats: 'aac ' 'aach' 'aacp'
    'ac-3' = AC3 (.ac3)
               data_formats: 'ac-3'
    'AIFC' = AIFC (.aifc, .aiff, .aif)
               data_formats: I8 BEI16 BEI24 BEI32 BEF32 BEF64 UI8 'ulaw'
                             'alaw' 'MAC3' 'MAC6' 'ima4' 'QDMC' 'QDM2'
                             'Qclp' 'agsm'
    'AIFF' = AIFF (.aiff, .aif)
               data_formats: I8 BEI16 BEI24 BEI32
    'amrf' = AMR (.amr)
               data_formats: 'samr' 'sawb'
    'm4af' = Apple MPEG-4 Audio (.m4a, .m4r)
               data_formats: '.mp1' '.mp2' '.mp3' 'aac ' 'aace' 'aacf'
                             'aacg' 'aach' 'aacl' 'aacp' 'ac-3' 'alac'
                             'ec-3' 'flac' 'paac' 'pac3' 'pec3'
    'm4bf' = Apple MPEG-4 AudioBooks (.m4b)
               data_formats: 'aac ' 'aace' 'aacf' 'aacg' 'aach' 'aacl'
                             'aacp' 'paac'
    'caff' = CAF (.caf, .caff)
               data_formats: '.mp1' '.mp2' '.mp3' 'aac ' 'aace' 'aacf'
                             'aacg' 'aach' 'aacl' 'aacp' 'ac-3' 'alac'
                             'alaw' 'apac' 'dvi8' 'ec-3' 'flac' 'ilbc'
                             'ima4' I8 BEI16 BEI24 BEI32 BEF32 BEF64 LEI16
                             LEI24 LEI32 LEF32 LEF64 'ms\x00\x02' 'ms\x00\x11'
                             'ms\x001' 'opus' 'paac' 'pac3' 'pach' 'pacp'
                             'pec3' 'pusa' 'qaac' 'qac3' 'qach' 'qacp'
                             'qapc' 'qec3' 'qflc' 'qlac' 'qusa' 'samr'
                             'ulaw' 'usac' 'zaac' 'zac3' 'zach' 'zacp'
                             'zec3' 'zlac'
    'ec-3' = EC3 (.ec3, .eac3)
               data_formats: 'ec-3'
    'flac' = FLAC (.flac)
               data_formats: 'flac'
    'loas' = LATM/LOAS (.loas, .latm, .xhe)
               data_formats: 'aac ' 'aace' 'aacf' 'aacg' 'aach' 'aacl'
                             'aacp' 'usac'
    'MPG1' = MPEG Layer 1 (.mp1, .mpeg, .mpa, .m1a, .m2a)
               data_formats: '.mp1'
    'MPG2' = MPEG Layer 2 (.mp2, .mpeg, .mpa, .m1a, .m2a)
               data_formats: '.mp2'
    'MPG3' = MPEG Layer 3 (.mp3, .mpeg, .mpa, .m1a, .m2a)
               data_formats: '.mp3'
    'mp4f' = MPEG-4 Audio (.mp4, .mpg4)
               data_formats: '.mp1' '.mp2' '.mp3' 'aac ' 'aace' 'aacf'
                             'aacg' 'aach' 'aacl' 'aacp' 'ac-3' 'alac'
                             'apac' 'ec-3' 'flac' LEF32 BEF32 LEF64 BEF64
                             LEI32 BEI32 UI0 UI0 UI0 UI0 'opus' 'paac'
                             'pac3' 'pach' 'pacp' 'pec3' 'pusa' 'qaac'
                             'qac3' 'qach' 'qacp' 'qapc' 'qec3' 'qflc'
                             'qlac' 'qusa' 'usac'
    'NeXT' = NeXT/Sun (.snd, .au)
               data_formats: I8 BEI16 BEI24 BEI32 BEF32 BEF64 'ulaw' 'alaw'
    'Sd2f' = Sound Designer II (.sd2)
               data_formats: I8 BEI16 BEI24 BEI32
    'WAVE' = WAVE (.wav)
               data_formats: UI8 LEI16 LEI24 LEI32 LEF32 LEF64 'ulaw'
                             'alaw' 'ms\x00\x11' 'ms\x00\x02' 'ms\x001'
    'BW64' = WAVE (BW64 for length over 4 GB) (.wav)
               data_formats: UI8 LEI16 LEI24 LEI32 LEF32 LEF64 'ulaw'
                             'alaw' 'ms\x00\x11' 'ms\x00\x02' 'ms\x001'
    'RF64' = WAVE (RF64 for length over 4 GB) (.wav)
               data_formats: UI8 LEI16 LEI24 LEI32 LEF32 LEF64 'ulaw'
                             'alaw' 'ms\x00\x11' 'ms\x00\x02' 'ms\x001'
    'W64f' = Wave64 (.w64)
               data_formats: UI8 LEI16 LEI24 LEI32 LEF32 LEF64 'ulaw'
                             'alaw' 'ms\x00\x11' 'ms\x00\x02' 'ms\x001'


afinfo piano_16k.wav
File:           piano_16k.wav
File type ID:   WAVE
Num Tracks:     1
----
Data format:     1 ch,  16000 Hz, Int16
                no channel layout.
estimated duration: 16.902062 sec
audio bytes: 540866
audio packets: 270433
bit rate: 256000 bits per second
packet size upper bound: 2
maximum packet size: 2
audio data file offset: 4096
optimized
source bit depth: I16
----

afinfo wav/music-16k-16bits-mono.wav
File:           wav/music-16k-16bits-mono.wav
File type ID:   WAVE
Num Tracks:     1
----
Data format:     1 ch,  16000 Hz, Int16
                no channel layout.
estimated duration: 17.893937 sec
audio bytes: 572606
audio packets: 286303
bit rate: 256000 bits per second
packet size upper bound: 2
maximum packet size: 2
audio data file offset: 44
optimized
source bit depth: I16
----


afinfo Suspense.wav
File:           Suspense.wav
File type ID:   WAVE
Num Tracks:     1
----
Data format:     1 ch,  16000 Hz, Int16
Channel layout: Mono
estimated duration: 3.320438 sec
audio bytes: 106254
audio packets: 53127
bit rate: 256000 bits per second
packet size upper bound: 2
maximum packet size: 2
audio data file offset: 4096
optimized
source bit depth: I16
----

afconvert -v -d LEI16@16000 -l Mono -c 1 --mix /Users/lkoepsel/Documents/Micropython_Halloween/Piano\ Strings\ Transition\ 1.caf piano_new.wav

-v verbose
-d LEI16@16000 Little Endian, 16bits, 16kHz
-l Mono  mono, single channel though this isn't recognized in afinfo Channel layout
-c 1 One channel output
--mix Mix the two channels to one channel
input_file
output_file

